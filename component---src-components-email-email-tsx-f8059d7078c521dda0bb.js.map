{"version":3,"sources":["webpack:///./src/components/email/Email.tsx","webpack:///./src/components/template-list/EmailList.tsx"],"names":["EmailState","recipientsCopied","ccCopied","bodyCopied","Email","props","autoOpen","siteConfig","data","emailData","markdownRemark","frontmatter","layoutProps","pageTitle","city","state","meta","metaQueryString","queryString","layout","componentDidMount","test","navigator","userAgent","this","body","replace","location","search","pathWithoutQuery","origin","pathname","window","history","replaceState","document","title","openEmail","subject","encodeURIComponent","defaultSubjectLine","trim","recipients","cc","bcc","concat","href","join","handleClipboardCopy","statePatch","copy","setState","DefundUtils","copyToClipboard","render","className","name","hidden","autoOpenMessage","onClick","bind","permalink","badMailtoMessage","undefined","dangerouslySetInnerHTML","__html","markdownToHTML","React","Component","pageQuery","EmailList"],"mappings":"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","file":"component---src-components-email-email-tsx-f8059d7078c521dda0bb.js","sourcesContent":["import { graphql, PageProps } from \"gatsby\";\nimport * as queryString from \"query-string\";\nimport React from \"react\";\nimport { DefundUtils } from \"../../DefundUtils\";\nimport { EmailData } from \"../../types/TemplateData\";\nimport {\n  EmailConfig,\n  EmailProps,\n  OptionalLayoutProps,\n} from \"../../types/PropTypes\";\nimport Layout from \"../common/Layout\";\nimport EmailList from \"../template-list/EmailList\";\n\n/**\n * The @link {Email} component state.\n */\nclass EmailState {\n  recipientsCopied = false;\n  ccCopied = false;\n  bodyCopied = false;\n}\n\n/**\n * A rendered email, containing links to send or copy.\n */\nexport default class Email extends React.Component<\n  PageProps<EmailProps>,\n  EmailState\n> {\n  siteConfig: EmailConfig;\n  emailData: EmailData;\n  layoutProps: OptionalLayoutProps;\n  autoOpen = false;\n\n  /**\n   * Initialize the component and its state.\n   * @param {PageProps<EmailProps>} props\n   */\n  constructor(props: PageProps<EmailProps>) {\n    super(props);\n    this.siteConfig = this.props.data.siteConfig;\n    this.emailData = this.props.data.markdownRemark.frontmatter;\n    this.layoutProps = {\n      pageTitle: `Defund12 in ${this.emailData.city}, ${this.emailData.state}`,\n      meta: `Send a pre-written email directly to ${this.emailData.city}, ${this.emailData.state} officials`,\n      metaQueryString: queryString.stringify({\n        state: this.emailData.state,\n        city: this.emailData.city,\n      }),\n      layout: \"email\",\n    };\n    this.state = new EmailState();\n  }\n\n  /**\n   * React client-side mount method.\n   */\n  componentDidMount(): void {\n    const isAndroid = /(android)/i.test(navigator.userAgent);\n    if (isAndroid) {\n      this.emailData.body = this.emailData.body.replace(\"\\n\", \"<br/>\");\n    }\n    const queryParams = queryString.parse(this.props.location.search);\n    if (\"browse\" in queryParams) {\n      // Automatically updates the URL so\n      // if folks try to share, it will auto-open\n      const pathWithoutQuery = `${this.props.location.origin}${this.props.location.pathname}`;\n      window.history.replaceState({}, document.title, pathWithoutQuery);\n    } else {\n      this.autoOpen = true;\n      this.openEmail();\n    }\n  }\n\n  /**\n   * Redirects the browser to a mailto: link containing the email information\n   */\n  openEmail(): void {\n    const subject = encodeURIComponent(\n      this.siteConfig.defaultSubjectLine.trim()\n    );\n    const body = encodeURIComponent(this.emailData.body.trim());\n    const recipients = this.emailData.recipients;\n    const cc = this.emailData.cc || [];\n    const bcc = recipients.concat(cc);\n    window.location.href = `mailto:?bcc=${bcc.join(\n      \",\"\n    )}&subject=${subject}&body=${body}`;\n  }\n\n  /**\n   * Updates the component state to reflect which element was clicked.\n   * @param {Pick<EmailState, K>} statePatch an object containing\n   *   the state update to apply\n   * @param {string} copy the text to copy to the user's clipboard.\n   */\n  handleClipboardCopy<K extends keyof EmailState>(\n    statePatch: Pick<EmailState, K>,\n    copy: string\n  ): void {\n    this.setState(statePatch);\n    DefundUtils.copyToClipboard(copy);\n  }\n\n  /**\n   * React render method.\n   * @return {React.ReactNode} the rendered component\n   */\n  render(): React.ReactNode {\n    return (\n      <Layout {...this.layoutProps}>\n        <section className=\"emailPageHeader\">\n          <h2>{this.emailData.name}</h2>\n          <b>\n            {this.emailData.city}, {this.emailData.state}\n          </b>\n          <p hidden={!this.autoOpen}>{this.siteConfig.autoOpenMessage}</p>\n          <div className=\"buttons\">\n            <a onClick={this.openEmail.bind(this)}>Send email</a>&nbsp;\n            <a\n              onClick={() =>\n                DefundUtils.copyToClipboard(this.emailData.permalink, true)\n              }\n            >\n              Copy link\n            </a>\n          </div>\n          <p>{this.siteConfig.badMailtoMessage}</p>\n        </section>\n\n        <article className=\"emailContentSection\">\n          <div className=\"container\">\n            <div className=\"emailContent\">\n              <div className=\"recipients\">\n                <b>To:</b>\n                <span\n                  className=\"copyToClipboard\"\n                  onClick={() =>\n                    this.handleClipboardCopy(\n                      { recipientsCopied: true },\n                      this.emailData.recipients.join(\", \")\n                    )\n                  }\n                >\n                  {this.state.recipientsCopied ? \"âœ…(copied)\" : \"ðŸ”—\"}\n                </span>\n                &nbsp;\n                {this.emailData.recipients.join(\", \")}\n              </div>\n\n              {this.emailData.cc ? (\n                <div className=\"recipients\">\n                  <b>CC:</b>\n                  <span\n                    className=\"copyToClipboard\"\n                    onClick={() =>\n                      this.handleClipboardCopy(\n                        { ccCopied: true },\n                        this.emailData.cc.join(\", \")\n                      )\n                    }\n                  >\n                    {this.state.ccCopied ? \"âœ…(copied)\" : \"ðŸ”—\"}\n                  </span>\n                  &nbsp;\n                  {this.emailData.cc.join(\", \")}\n                </div>\n              ) : undefined}\n\n              <div className=\"recipients\">\n                <b>Subject:</b> {this.siteConfig.defaultSubjectLine}\n              </div>\n              <div>\n                <b>Message:</b>&nbsp;\n                <i>\n                  (Don't forget to replace the [x]'s with your information!)\n                </i>\n                <span\n                  className=\"copyToClipboard\"\n                  onClick={() =>\n                    this.handleClipboardCopy(\n                      { bodyCopied: true },\n                      this.emailData.body\n                    )\n                  }\n                >\n                  {this.state.bodyCopied ? \"âœ…(copied)\" : \"ðŸ”—\"}\n                </span>\n                <span\n                  dangerouslySetInnerHTML={{\n                    __html: DefundUtils.markdownToHTML(this.emailData.body),\n                  }}\n                ></span>\n              </div>\n            </div>\n          </div>\n        </article>\n        <br></br>\n        <EmailList />\n      </Layout>\n    );\n  }\n}\n\nexport const pageQuery = graphql`\n  query($permalink: String!) {\n    markdownRemark(\n      frontmatter: { permalink: { eq: $permalink }, layout: { eq: \"email\" } }\n    ) {\n      frontmatter {\n        body\n        cc\n        city\n        country\n        date\n        name\n        state\n        permalink\n        recipients\n      }\n    }\n    siteConfig {\n      autoOpenMessage\n      badMailtoMessage\n      defaultSubjectLine\n    }\n  }\n`;\n","import TemplateList from \"./TemplateList\";\nimport React from \"react\";\n\n/** List of all emails\n * @return {React.ReactElement} the rendered list\n */\nexport default function EmailList(): React.ReactElement {\n  return <TemplateList layout=\"email\" />;\n}\n"],"sourceRoot":""}